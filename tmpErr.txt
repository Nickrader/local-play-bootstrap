This is a test.  This is only a test.
Connecting to port 8080
Connecting to 127.0.0.1:8080...
Failed to establish websocket connection: Malformed message

^^^ logs/bot_controller1/blank_bot/stderr.log

2024-08-09T06:02:02.467920Z DEBUG start_bot{start_bot=StartBot { bot_name: "blank_bot", bot_type: CppLinux, opponent_id: "2", player_num: One, match_id: 2, process_key: 9098, should_download: false }}: bot_controller/src/routes.rs:255: Starting bot with command cd "/bots/blank_bot" && "./blank_bot" "--GamePort" "8080" "--LadderServer" "172.19.0.5" "--StartPort" "8080" "--OpponentId" "2"

^^^ bot_controller1/bot_controller/bot_controller.log

2024-08-09T06:02:02.468014Z DEBUG start_bot{start_bot=StartBot { bot_name: "loser_bot", bot_type: Python, opponent_id: "1", player_num: Two, match_id: 2, process_key: 9092, should_download: false }}: bot_controller/src/routes.rs:255: Starting bot with command cd "/bots/loser_bot" && "python" "run.py" "--GamePort" "8080" "--LadderServer" "172.19.0.5" "--StartPort" "8080" "--OpponentId" "1"

^^^bot_controller2/bot_controller/bot_controller.log

Starting ladder game...
2024-08-09 06:02:55.316 | ERROR    | sc2.protocol:__request:50 - Cannot receive: Connection already closed.

^^^bot_controller2/loser_bot/stderr.log

2024-08-09T06:02:01.429627Z DEBUG proxy_controller/src/main.rs:150: listening on 0.0.0.0:8080
2024-08-09T06:02:01.429652Z  INFO proxy_controller/src/match_scheduler/mod.rs:35: Arena Client started
2024-08-09T06:02:01.430651Z  INFO proxy_controller/src/match_scheduler/mod.rs:65: Waiting for controllers to become ready
2024-08-09T06:02:02.449315Z  INFO proxy_controller/src/match_scheduler/mod.rs:98: Sending start requests to SC2
2024-08-09T06:02:02.449805Z  INFO proxy_controller/src/match_scheduler/mod.rs:120: Starting Game - Round 0
2024-08-09T06:02:02.449996Z  INFO proxy_controller/src/match_scheduler/mod.rs:121: blank_bot vs loser_bot
2024-08-09T06:02:02.462000Z DEBUG proxy_controller/src/match_scheduler/mod.rs:140: SC2-1 Response:
StartResponse { status: Success, status_reason: "", port: 9098, process_key: 9098 }
2024-08-09T06:02:02.462488Z DEBUG proxy_controller/src/match_scheduler/mod.rs:141: SC2-2 Response:
StartResponse { status: Success, status_reason: "", port: 9092, process_key: 9092 }
2024-08-09T06:02:02.462718Z DEBUG proxy_controller/src/match_scheduler/mod.rs:167: Starting bots
2024-08-09T06:02:03.030825Z DEBUG websocket{addr=172.19.0.2:43180}: proxy_controller/src/ws_routes.rs:40: Connection from 172.19.0.2:43180
2024-08-09T06:02:03.030886Z DEBUG websocket{addr=172.19.0.2:43180}: proxy_controller/src/ws_routes.rs:45: Got free SC2 URL: Some(SC2Url { host: "sc2_controller", port: 9098, is_allocated: true })
2024-08-09T06:02:03.030904Z DEBUG websocket{addr=172.19.0.2:43180}: proxy_controller/src/ws_routes.rs:219: Connecting to the SC2 process: "ws://sc2_controller:9098/sc2api", "sc2_controller:9098"
2024-08-09T06:02:05.037913Z DEBUG websocket{addr=172.19.0.2:43180}: proxy_controller/src/ws_routes.rs:79: Player Details: Some(Player { addr: 172.19.0.2:43180, player_num: Some(Two), bot_name: Some("loser_bot") })
2024-08-09T06:02:05.038238Z DEBUG websocket{addr=172.19.0.2:43180 bot_name="loser_bot" bot_name="loser_bot"}: proxy_controller/src/ws_routes.rs:110: Waiting for state to become ready

^^^proxy_controller/proxy_controller.log

2024-08-09T06:02:01.556170Z DEBUG sc2_controller/src/main.rs:123: listening on 0.0.0.0:8083

^^^sc2_controller/sc2_controller/sc2_controller.log


#####  Seems stderr says our bot is trying to use 127.0.0.1:8080
#####    but proxy_controller is listening on 0.0.0.0:8080[D[D[D[###  I can't yet see what is setting our addy to 127.0...
Okay, sc2_coordinator.cc CoordinatorImp::CoordinatorImp(),
sets our addy to 127.0.0.1

Now need to figure out why this is a problem, or not overriden.

docker-compose-host-network.yml has the right addy 127.0.0.1

but get error running it.
Error response from daemon: invalid volume specification: 'C:\Program Files (x86)\StarCraft II\Maps:/root/StarCraftII/maps:rw'

root@DESKTOP-4EN0ECU:~/local-play-bootstrap# docker compose -f docker-compose-host-network.yml up

